<?php

namespace Reach\Components\Menu\MenuItem;

function filterArgs(array $args): ?array
{
    // ---------------------------------------
    // Default arguments.
    // ---------------------------------------
    $args = array_merge([
        'classes' => [],
        'item' => null,
        'depth' => 0,
        'max_depth' => null,
        'display_submenu' => false,
    ], $args);

    // ---------------------------------------
    // Bail early - return null for no output.
    // ---------------------------------------
    if (empty($args['item'])) {
        return null;
    }

    $item = $args['item'];

    if (!$item instanceof \WP_Post) {
        return null;
    }

    // ---------------------------------------
    // Required classes.
    // ---------------------------------------
    $args['classes'] = array_merge([
        'menu-item',
    ], $args['classes'], $item->classes);

    $args['attributes']['id'] = 'menu-item-' . $item->ID;

    $args['link'] = [
        'url' => $item->url,
        'content' => $item->title,
        'target' => $item->target ?: null,
        'attributes' => [
            'title' => $item->attr_title ?: null,
        ],
    ];

    if (!empty($item->xfn)) {
        $args['link']['attributes']['rel'][] = $item->xfn;
    }

    if (!empty($item->children) && (empty($args['max_depth']) || $args['depth'] + 1 <= $args['max_depth'])) {
        $args['display_submenu'] = true;

        $args['sub-menu-attributes'] = [
            'id' => 'sub-menu-' . $item->ID,
            'class' => \Reach\Helpers::buildClasses([
                'sub-menu',
                'sub-menu--depth-' . $args['depth'],
                'js-expandable-element',
            ]),

            // Initially hide sub-menus.
            'hidden' => true,
            'aria-hidden' => 'true',
        ];

        $args['button'] = [
            'content' => \__('Expand or collapse a sub menu', 'reach'),
            'visually-hidden-text' => true,
            'classes' => ['sub-menu-toggler'],
            'attributes' => [
                'aria-expanded' => 'false',
                'aria-controls' => 'sub-menu-' . $item->ID,
                'id' => 'sub-menu-' . $item->ID . '-toggler',
            ],
        ];
    }

    // Add multiple
    $args['classes'] = buildMenuItemClasses($args['classes'], $item, $args);

    // -------------------------------------------------------------------------
    // Return the filtered args.
    // -------------------------------------------------------------------------
    return $args;
}

/**
 * Generate an array of menu item classes based on the item and its component's arguments.
 *
 * Includes classes similar to the ones generated by `wp_nav_menu()`, though many are commented out
 * as they're generally unnecessary. Uncomment them to use on a project when needed.
 *
 * @link https://developer.wordpress.org/reference/functions/wp_nav_menu/#menu-item-css-classes
 *
 * @param array $classes The initial array of basic menu item classes.
 * @param \WP_Post $item The menu item object.
 * @param array $args The component arguments used to render the menu item.
 * @return array The generated array of menu item classes.
 */
function buildMenuItemClasses(array $classes, \WP_Post $item, array $args): array
{
    // ID class.
    // $classes[] = 'menu-item--' . $item->ID;

    // Depth class.
    $classes[] = 'menu-item--depth-' . $args['depth'];

    // Object Type class, e.g. taxonomy, post type, etc
    // Includes exception for 'reach-template' post type.
    // $classes[] = 'menu-item--type--' . ($item->object === 'reach-template' ? 'taxonomy' : $item->type);

    // Object Type Name class. e.g. category, event, etc.
    // $classes[] = 'menu-item--object--' . $item->object;

    // Homepage class.
    // Potentially confusing class: Home vs. Front Page.
    if ($item->type === 'post_type' && (int) \get_option('page_on_front') === (int) $item->object_id) {
        $classes[] = 'menu-item--home';
    }

    // Current Menu Item class.
    if ($item->is_current_item) {
        $classes[] = 'menu-item--current';
    }

    // Parent Menu Item class.
    if ($item->is_current_parent) {
        $classes[] = 'current-menu-parent';
    }

    // Ancestor Menu Item class.
    if ($item->is_current_ancestor) {
        $classes[] = 'current-menu-ancestor';
    }

    // TODO: .current-{object}-parent
    // TODO: .current-{type}-parent

    // TODO: .current-{object}-ancestor
    // TODO: .current-{type}-ancestor

    // -------------------------------------------------------------------------
    // Menu Items with children (i.e. a submenu).
    // -------------------------------------------------------------------------
    if (!empty($item->children) && (empty($args['max_depth']) || $args['depth'] + 1 <= $args['max_depth'])) {
        // Has sub-menu with child items.
        $classes[] = 'menu-item--has-children';

        // Child Count class.
        // $classes[] = 'menu-item--has-' . count($item->children) . '-children';
    }

    return $classes;
}
